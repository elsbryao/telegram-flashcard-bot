# bot.py
import os
import zipfile
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from utils import generate_flashcards_from_word, generate_flashcards_from_eng_phrases, generate_flashcards_from_rus_phrases

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")

output_zip = "flashcards.zip"

# üîä –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
VOICES = {
    "Theresa": "ORI4FGngxVpyYi4rGvdr",
    "Chris": "iP95p4xoKVk53GoZ742B",
    "Brian": "nPczCjzI2devNBz1zQrb"
}

# üíæ –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_voice_map = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/word [—Å–ª–æ–≤–æ] ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n/eng ‚Äî –∞–Ω–≥–ª. —Ñ—Ä–∞–∑—ã (–ø–µ—Ä–µ–≤–æ–¥ + –æ–∑–≤—É—á–∫–∞)\n/rus ‚Äî —Ä—É—Å. —Ñ—Ä–∞–∑—ã (–ø–µ—Ä–µ–≤–æ–¥ + –æ–∑–≤—É—á–∫–∞)\n/voice ‚Äî –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –æ–∑–≤—É—á–∫–∏"
    )

async def voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"voice:{vid}")] for name, vid in VOICES.items()
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def voice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    voice_id = query.data.split(":")[1]
    user_id = query.from_user.id
    user_voice_map[user_id] = voice_id
    await query.edit_message_text("–ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω!")

async def word_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /word")
        return
    word = context.args[0]
    await update.message.reply_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–ª–æ–≤–∞: {word}...")
    voice_id = user_voice_map.get(update.effective_user.id, list(VOICES.values())[0])
    generate_flashcards_from_word(word, OPENAI_API_KEY, ELEVENLABS_API_KEY, voice_id)
    with open(output_zip, 'rb') as f:
        await update.message.reply_document(document=f, filename="flashcards.zip")

async def eng_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phrases = update.message.text.replace("/eng", "").strip().split("\n")
    if not phrases or phrases == ['']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /eng")
        return
    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã...")
    voice_id = user_voice_map.get(update.effective_user.id, list(VOICES.values())[0])
    generate_flashcards_from_eng_phrases(phrases, OPENAI_API_KEY, ELEVENLABS_API_KEY, voice_id)
    with open(output_zip, 'rb') as f:
        await update.message.reply_document(document=f, filename="flashcards.zip")

async def rus_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phrases = update.message.text.replace("/rus", "").strip().split("\n")
    if not phrases or phrases == ['']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /rus")
        return
    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã...")
    voice_id = user_voice_map.get(update.effective_user.id, list(VOICES.values())[0])
    generate_flashcards_from_rus_phrases(phrases, OPENAI_API_KEY, ELEVENLABS_API_KEY, voice_id)
    with open(output_zip, 'rb') as f:
        await update.message.reply_document(document=f, filename="flashcards.zip")

def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("word", word_handler))
    app.add_handler(CommandHandler("eng", eng_handler))
    app.add_handler(CommandHandler("rus", rus_handler))
    app.add_handler(CommandHandler("voice", voice))
    app.add_handler(CallbackQueryHandler(voice_callback, pattern="^voice:"))
    app.run_polling()

if __name__ == '__main__':
    main()
